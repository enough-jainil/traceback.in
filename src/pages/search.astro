---
import Layout from '@layouts/Default.astro';
import { Card } from '@eliancodes/brutal-ui';

interface SearchResult {
  slug: string;
  title: string;
  description: string;
  tags: string[];
  pubDate: Date;
}
---

<Layout
  title="Search"
  description="Search through all reviews and articles"
  pageTitle="Search"
>
  <main class="min-h-screen bg-purple p-6">
    <div class="max-w-3xl mx-auto">
      <Card>
        <div class="p-6">
          <div class="relative mb-8">
            <input
              type="text"
              id="search-input"
              placeholder="Search reviews..."
              class="w-full px-6 py-4 text-lg border-4 border-black rounded-lg focus:outline-none focus:ring-2 focus:ring-black pr-12 font-sanchez"
            />
            <button 
              id="clear-search" 
              class="absolute right-4 top-1/2 -translate-y-1/2 w-8 h-8 flex items-center justify-center text-black hover:text-gray-700 transition-opacity duration-200"
              aria-label="Clear search"
            >
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="3" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          <div id="search-results" class="space-y-4">
            <!-- Results will be populated here -->
          </div>
        </div>
      </Card>
    </div>
  </main>
</Layout>

<script>
  import Fuse from 'fuse.js';

  interface BaseResult {
    slug: string;
    title: string;
    tags: string[];
  }

  interface SearchResult extends BaseResult {
    description: string;
  }

  interface ReviewResult extends BaseResult {
    description: string;
  }

  type SearchResultType = SearchResult | ReviewResult;

  let fuse: Fuse<SearchResultType>;
  let searchInput: HTMLInputElement | null;
  let searchResults: HTMLDivElement | null;
  let clearSearchButton: HTMLButtonElement | null;

  async function initSearch() {
    // Reset references
    searchInput = document.getElementById('search-input') as HTMLInputElement;
    searchResults = document.getElementById('search-results') as HTMLDivElement;
    clearSearchButton = document.getElementById('clear-search') as HTMLButtonElement;

    if (!searchInput || !searchResults || !clearSearchButton) return;

    // Fetch search index if not already fetched
    if (!fuse) {
      const response = await fetch('/api/search-index');
      const posts: SearchResultType[] = await response.json();
      
      fuse = new Fuse(posts, {
        keys: ['title', 'description', 'tags', 'content'],
        threshold: 0.4,
        includeMatches: true
      });
    }

    // Clear any previous event listeners
    const newSearchInput = searchInput.cloneNode(true) as HTMLInputElement;
    const newClearButton = clearSearchButton.cloneNode(true) as HTMLButtonElement;
    
    searchInput.parentNode?.replaceChild(newSearchInput, searchInput);
    clearSearchButton.parentNode?.replaceChild(newClearButton, clearSearchButton);
    
    searchInput = newSearchInput;
    clearSearchButton = newClearButton;

    // Add event listeners
    searchInput.addEventListener('input', handleSearch);
    clearSearchButton.addEventListener('click', clearSearch);
    
    // Restore previous search if exists
    const previousSearch = sessionStorage.getItem('lastSearch');
    if (previousSearch) {
      searchInput.value = previousSearch;
      handleSearch({ target: searchInput } as any);
      clearSearchButton.classList.remove('opacity-0', 'pointer-events-none');
    }
  }

  function handleSearch(e: Event) {
    const target = e.target as HTMLInputElement;
    if (!searchResults || !fuse || !clearSearchButton) return;

    if (target.value) {
      clearSearchButton.classList.remove('opacity-0', 'pointer-events-none');
    } else {
      clearSearchButton.classList.add('opacity-0', 'pointer-events-none');
    }

    sessionStorage.setItem('lastSearch', target.value);

    if (!target.value) {
      searchResults.innerHTML = '';
      return;
    }

    const results = fuse.search(target.value);
    const html = results
      .map(({ item }) => `
        <div class="p-4 border-4 border-black rounded-lg bg-pink hover:bg-pink-200 transition-colors">
          <a href="/blog/${item.slug}/" class="block">
            <h2 class="text-2xl font-bold mb-2 dm-serif">${item.title}</h2>
            <p class="text-gray-800 mb-3 sanchez">${item.description}</p>
            <div class="flex gap-2 flex-wrap">
              ${item.tags.map(tag => `
                <div class="px-3 py-1 text-sm border-2 border-black rounded-full bg-purple hover:bg-purple-400 transition-colors sanchez">
                  ${tag}
                </div>
              `).join('')}
            </div>
          </a>
          </div>
      `)
      .join('');

    searchResults.innerHTML = html || '<p class="text-center text-gray-500 sanchez">No results found</p>';
  }

  function clearSearch() {
    if (!searchInput || !searchResults || !clearSearchButton) return;
    
    searchInput.value = '';
    searchResults.innerHTML = '';
    sessionStorage.removeItem('lastSearch');
    clearSearchButton.classList.add('opacity-0', 'pointer-events-none');
  }

  // Initialize on page load and view transitions
  document.addEventListener('astro:page-load', initSearch);
  
  // Also initialize on initial page load
  initSearch();
</script> 