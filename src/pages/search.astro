---
import Layout from '@layouts/Default.astro';
import { Card } from '@eliancodes/brutal-ui';

interface SearchResult {
  slug: string;
  title: string;
  description: string;
  tags: string[];
}
---

<Layout
  title="Search"
  description="Search through all reviews and articles"
  pageTitle="Search"
>
  <main class="min-h-screen bg-purple p-6">
    <div class="max-w-3xl mx-auto">
      <Card>
        <div class="p-4">
          <!-- Search Container -->
          <div class="relative mb-4">
            <input
              type="text"
              id="search-input"
              placeholder="Search reviews..."
              class="w-full px-4 py-3 text-lg border-2 border-black rounded-lg focus:outline-none focus:ring-2 focus:ring-black pr-12 font-sanchez bg-white"
            />
            <button 
              id="clear-search"
              class="absolute right-3 top-1/2 -translate-y-1/2 opacity-0 pointer-events-none"
              aria-label="Clear search"
            >
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-5 h-5">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          <!-- Results Container -->
          <div id="search-results" class="space-y-2">
            <!-- Results will be populated here -->
          </div>
        </div>
      </Card>
    </div>
  </main>
</Layout>

<script>
  import Fuse from 'fuse.js';

  class SearchHandler {
    private fuse: Fuse<SearchResult> | null = null;
    private searchInput: HTMLInputElement | null = null;
    private searchResults: HTMLDivElement | null = null;
    private clearButton: HTMLButtonElement | null = null;

    constructor() {
      this.initializeElements();
      this.setupEventListeners();
      this.loadPreviousSearch();
    }

    private async initializeElements() {
      this.searchInput = document.getElementById('search-input') as HTMLInputElement;
      this.searchResults = document.getElementById('search-results') as HTMLDivElement;
      this.clearButton = document.getElementById('clear-search') as HTMLButtonElement;

      if (!this.fuse) {
        await this.initializeFuse();
      }
    }

    private async initializeFuse() {
      try {
        const response = await fetch('/api/search-index');
        if (!response.ok) throw new Error('Failed to fetch search index');
        
        const searchIndex: SearchResult[] = await response.json();
        this.fuse = new Fuse(searchIndex, {
          keys: ['title', 'description', 'tags'],
          threshold: 0.3,
          includeMatches: true
        });
      } catch (error) {
        console.error('Search initialization failed:', error);
      }
    }

    private setupEventListeners() {
      if (!this.searchInput || !this.clearButton) return;

      this.searchInput.addEventListener('input', (e) => this.handleSearch(e));
      this.clearButton.addEventListener('click', () => this.clearSearch());
    }

    private loadPreviousSearch() {
      if (!this.searchInput || !this.clearButton) return;

      const previousSearch = sessionStorage.getItem('lastSearch');
      if (previousSearch) {
        this.searchInput.value = previousSearch;
        this.handleSearch({ target: this.searchInput } as any);
        this.clearButton.classList.remove('opacity-0', 'pointer-events-none');
      }
    }

    private handleSearch(e: Event) {
      const target = e.target as HTMLInputElement;
      if (!this.searchResults || !this.fuse || !this.clearButton) return;

      // Toggle clear button
      this.clearButton.classList.toggle('opacity-0', !target.value);
      this.clearButton.classList.toggle('pointer-events-none', !target.value);

      // Save to session storage
      sessionStorage.setItem('lastSearch', target.value);

      if (!target.value) {
        this.searchResults.innerHTML = '';
        return;
      }

      const results = this.fuse.search(target.value);
      this.renderResults(results);
    }

    private renderResults(results: Fuse.FuseResult<SearchResult>[]) {
      if (!this.searchResults) return;

      const html = results.length ? results
        .map(({ item }) => `
          <article class="p-3 border-2 border-black rounded-lg bg-yellow">
            <a href="/blog/${item.slug}/" class="block">
              <h2 class="text-lg font-bold mb-1 dm-serif">${item.title}</h2>
              <p class="text-sm text-gray-800 mb-2 sanchez line-clamp-2">${item.description}</p>
              <div class="flex gap-1.5 flex-wrap">
                ${item.tags.map(tag => `
                  <span class="px-2 py-0.5 text-xs border border-black rounded-full bg-pink sanchez">
                    ${tag}
                  </span>
                `).join('')}
              </div>
            </a>
          </article>
        `).join('')
        : '<p class="text-center text-gray-500 sanchez py-4">No results found</p>';

      this.searchResults.innerHTML = html;
    }

    private clearSearch() {
      if (!this.searchInput || !this.searchResults || !this.clearButton) return;
      
      this.searchInput.value = '';
      this.searchResults.innerHTML = '';
      sessionStorage.removeItem('lastSearch');
      this.clearButton.classList.add('opacity-0', 'pointer-events-none');
    }
  }

  // Initialize search on page load and view transitions
  function initSearch() {
    new SearchHandler();
  }

  document.addEventListener('astro:page-load', initSearch);
  initSearch();
</script> 