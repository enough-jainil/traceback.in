---
import { getTVShowDetails, getTVShowCredits, getSimilarTVShows, getImageUrl } from '../../utils/tmdb';

interface Props {
  tvId: number;
}

const { tvId } = Astro.props;

let tvDetails, tvCredits, similarShows;
let error = null;

try {
  [tvDetails, tvCredits, similarShows] = await Promise.all([
    getTVShowDetails(tvId),
    getTVShowCredits(tvId),
    getSimilarTVShows(tvId)
  ]);
} catch (e) {
  error = e;
  console.error('Error fetching TV show data:', e);
}

if (error || !tvDetails || !tvCredits) {
  return `
    <div class="flex flex-col items-center justify-center min-h-[50vh] text-center p-8">
      <h2 class="text-2xl font-bold mb-4">Unable to load TV show details</h2>
      <p class="text-gray-600 mb-6">Please check your internet connection and try again.</p>
      <button onclick="window.location.reload()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        Retry
      </button>
    </div>
  `;
}

// Format average runtime
const avgRuntime = tvDetails.episode_run_time[0] || 0;
const formattedRuntime = `${avgRuntime} minutes`;

// Format dates
const formatDate = (dateStr: string) => {
  return new Date(dateStr).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

// Get key crew members
const creators = tvDetails.created_by;
const writers = tvCredits.crew.filter(person => ['Writer', 'Story Editor', 'Executive Story Editor'].includes(person.job));
const producers = tvCredits.crew.filter(person => ['Producer', 'Executive Producer'].includes(person.job)).slice(0, 3);
const composer = tvCredits.crew.find(person => person.job === 'Original Music Composer');
---

<div class="tv-show-details w-full max-w-7xl mx-auto px-4 mt-8 md:mt-16">
  <!-- Hero Section with Backdrop - Hidden on Mobile -->
  <div class="hidden md:block relative h-[70vh] mb-12">
    <img 
      src={getImageUrl(tvDetails.backdrop_path, 'original')}
      alt={`${tvDetails.name} backdrop`}
      class="w-full h-full object-cover rounded-lg shadow-xl"
    />
    <div class="absolute inset-0 bg-gradient-to-t from-black/90 via-black/50 to-transparent"></div>
    <div class="absolute bottom-0 left-0 p-12 text-white">
      <h1 class="text-5xl md:text-7xl font-bold mb-4">{tvDetails.name}</h1>
      <p class="text-2xl italic text-gray-300">{tvDetails.tagline}</p>
    </div>
  </div>

  <!-- Mobile Title Section -->
  <div class="md:hidden mb-8">
    <h1 class="text-4xl font-bold mb-2">{tvDetails.name}</h1>
    <p class="text-xl italic text-gray-600">{tvDetails.tagline}</p>
  </div>

  <!-- Basic Info Grid -->
  <div class="grid md:grid-cols-3 gap-6 md:gap-12 mb-12">
    <div class="md:order-last md:col-span-1">
      <img 
        src={getImageUrl(tvDetails.poster_path)}
        alt={`${tvDetails.name} poster`}
        class="w-full rounded-lg shadow-xl"
      />
    </div>
    
    <div class="md:col-span-2">
      <h2 class="text-2xl md:text-3xl font-bold mb-4 md:mb-6">Overview</h2>
      <p class="text-lg md:text-xl leading-relaxed mb-6 md:mb-8">{tvDetails.overview}</p>
      
      <!-- Key Info Section -->
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 md:gap-6 mt-6 md:mt-8">
        {creators.length > 0 && (
          <div class="mb-4">
            <h3 class="text-lg font-semibold text-gray-700">Created By</h3>
            <p class="text-xl">{creators.map(creator => creator.name).join(', ')}</p>
          </div>
        )}
        
        {writers.length > 0 && (
          <div class="mb-4">
            <h3 class="text-lg font-semibold text-gray-700">Writers</h3>
            <p class="text-xl">{writers.map(writer => writer.name).join(', ')}</p>
          </div>
        )}
        
        {producers.length > 0 && (
          <div class="mb-4">
            <h3 class="text-lg font-semibold text-gray-700">Producers</h3>
            <p class="text-xl">{producers.map(producer => producer.name).join(', ')}</p>
          </div>
        )}

        {composer && (
          <div class="mb-4">
            <h3 class="text-lg font-semibold text-gray-700">Music Composer</h3>
            <p class="text-xl">{composer.name}</p>
          </div>
        )}
      </div>
      
      <!-- Show Details -->
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 md:gap-6 mt-6 md:mt-8">
        <div>
          <h3 class="text-lg font-semibold text-gray-700">First Aired</h3>
          <p class="text-xl">{formatDate(tvDetails.first_air_date)}</p>
        </div>
        {tvDetails.status === 'Ended' && (
          <div>
            <h3 class="text-lg font-semibold text-gray-700">Last Aired</h3>
            <p class="text-xl">{formatDate(tvDetails.last_air_date)}</p>
          </div>
        )}
        <div>
          <h3 class="text-lg font-semibold text-gray-700">Status</h3>
          <p class="text-xl">{tvDetails.status}</p>
        </div>
        <div>
          <h3 class="text-lg font-semibold text-gray-700">Seasons</h3>
          <p class="text-xl">{tvDetails.number_of_seasons} seasons</p>
        </div>
        <div>
          <h3 class="text-lg font-semibold text-gray-700">Episodes</h3>
          <p class="text-xl">{tvDetails.number_of_episodes} episodes ({tvDetails.number_of_seasons} seasons)</p>
        </div>
        <!-- <div>
          <h3 class="text-lg font-semibold text-gray-700">Episode Runtime</h3>
          <p class="text-xl">{formattedRuntime}</p>
        </div> -->
        {tvDetails.networks?.length > 0 && (
          <div>
            <h3 class="text-lg font-semibold text-gray-700">Network</h3>
            <p class="text-xl">{tvDetails.networks[0].name}</p>
          </div>
        )}
      </div>
    </div>
  </div>

  <!-- Cast Section -->
  <div class="mb-8 md:mb-12">
    <h2 class="text-2xl md:text-3xl font-bold mb-4 md:mb-6">Main Cast</h2>
    <div class="relative">
      <div class="flex overflow-x-auto pb-4 md:grid md:grid-cols-4 lg:grid-cols-6 gap-4 md:gap-6 scrollbar-hide">
        {tvCredits.cast.slice(0, 6).map((actor) => (
          <div class="flex-none w-36 md:w-auto text-center">
            <img 
              src={actor.profile_path ? getImageUrl(actor.profile_path) : '/placeholder-avatar.png'}
              alt={actor.name}
              class="w-full rounded-lg shadow-lg mb-2 md:mb-3"
            />
            <p class="font-semibold text-base md:text-lg whitespace-normal">{actor.name}</p>
            <p class="text-gray-600 text-sm md:text-base whitespace-normal">{actor.character}</p>
          </div>
        ))}
      </div>
    </div>
  </div>
</div>