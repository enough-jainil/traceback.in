---
import { getMovieDetails, getMovieCredits, getSimilarMovies, getImageUrl } from '../../utils/tmdb';

interface Props {
  movieId: number;
}

const { movieId } = Astro.props;

let movieDetails, movieCredits, similarMovies;
let error = null;

try {
  [movieDetails, movieCredits] = await Promise.all([
    getMovieDetails(movieId),
    getMovieCredits(movieId)
  ]);
} catch (e) {
  error = e;
  console.error('Error fetching movie data:', e);
}

if (error || !movieDetails || !movieCredits) {
  return `
    <div class="flex flex-col items-center justify-center min-h-[50vh] text-center p-8">
      <h2 class="text-2xl font-bold mb-4">Unable to load movie details</h2>
      <p class="text-gray-600 mb-6">Please check your internet connection and try again.</p>
      <button onclick="window.location.reload()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
        Retry
      </button>
    </div>
  `;
}

// Format runtime to hours and minutes
const hours = Math.floor(movieDetails.runtime / 60);
const minutes = movieDetails.runtime % 60;
const formattedRuntime = `${hours}h ${minutes}m`;

// Format date
const releaseDate = new Date(movieDetails.release_date).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

// Format budget and revenue
const formatCurrency = (amount: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'INR',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(amount);
};

// Get key crew members
const director = movieCredits.crew.find(person => person.job === 'Director');
const writers = movieCredits.crew.filter(person => ['Screenplay', 'Writer', 'Story'].includes(person.job));
const producers = movieCredits.crew.filter(person => ['Producer', 'Executive Producer'].includes(person.job)).slice(0, 3);
const composer = movieCredits.crew.find(person => person.job === 'Original Music Composer');
---

<div class="movie-details w-full max-w-7xl mx-auto px-4 mt-8 md:mt-16">
  <!-- Combined Hero Section -->
  <div class="relative h-[50vh] md:h-[70vh] mb-8 md:mb-12">
    <img 
      src={getImageUrl(movieDetails.backdrop_path, 'original')}
      alt={`${movieDetails.title} backdrop`}
      class="w-full h-full object-cover rounded-lg shadow-xl"
    />
    <div class="absolute inset-0 bg-gradient-to-t from-black/90 via-black/50 to-transparent"></div>
    <div class="absolute bottom-0 left-0 p-6 md:p-12">
      <h1 class="text-4xl md:text-7xl font-bold mb-2 md:mb-4 text-white">{movieDetails.title}</h1>
      <p class="text-xl md:text-2xl italic text-gray-300">{movieDetails.tagline}</p>
      <div class="flex flex-wrap gap-2 md:gap-3 mt-2 md:mt-4">
        {movieDetails.genres.map((genre) => (
          <span class="px-3 py-1 bg-white/20 rounded-full text-white text-sm hover:bg-white/30 transition-colors">
            {genre.name}
          </span>
        ))}
      </div>
    </div>
  </div>

  <!-- Basic Info Grid -->
  <div class="grid md:grid-cols-3 gap-6 md:gap-12 mb-12">
    <!-- Move poster to top on mobile -->
    <div class="md:order-last md:col-span-1 hidden md:block">
      <img 
        src={getImageUrl(movieDetails.poster_path)}
        alt={`${movieDetails.title} poster`}
        class="w-full rounded-lg shadow-xl "
      />
    </div>
    
    <div class="md:col-span-2">
      <h2 class="text-2xl md:text-3xl font-bold mb-4 md:mb-6">Overview</h2>
      <p class="text-lg md:text-xl leading-relaxed mb-6 md:mb-8">{movieDetails.overview}</p>
      
      <!-- Key Crew Section -->
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 md:gap-6 mt-6 md:mt-8">
        {director && (
          <div class="mb-4">
            <h3 class="text-lg font-semibold text-gray-700">Director</h3>
            <p class="text-xl">{director.name}</p>
          </div>
        )}
        
        {writers.length > 0 && (
          <div class="mb-4">
            <h3 class="text-lg font-semibold text-gray-700">Writers</h3>
            <p class="text-xl">{writers.map(writer => writer.name).join(', ')}</p>
          </div>
        )}
        
        {producers.length > 0 && (
          <div class="mb-4">
            <h3 class="text-lg font-semibold text-gray-700">Producers</h3>
            <p class="text-xl">{producers.map(producer => producer.name).join(', ')}</p>
          </div>
        )}

        {composer && (
          <div class="mb-4">
            <h3 class="text-lg font-semibold text-gray-700">Music Composer</h3>
            <p class="text-xl">{composer.name}</p>
          </div>
        )}
      </div>
      
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 md:gap-6 mt-6 md:mt-8">
        <div>
          <h3 class="text-lg font-semibold text-gray-700">Release Date</h3>
          <p class="text-xl">{releaseDate}</p>
        </div>
        <div>
          <h3 class="text-lg font-semibold text-gray-700">Runtime</h3>
          <p class="text-xl">{formattedRuntime}</p>
        </div>
        <div>
          <h3 class="text-lg font-semibold text-gray-700">Budget</h3>
          <p class="text-xl">{formatCurrency(movieDetails.budget)}</p>
        </div>
        <div>
          <h3 class="text-lg font-semibold text-gray-700">Revenue</h3>
          <p class="text-xl">{formatCurrency(movieDetails.revenue)}</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Cast Section -->
  <div class="mb-8 md:mb-12">
    <h2 class="text-2xl md:text-3xl font-bold mb-4 md:mb-6">Top Cast</h2>
    <div class="relative">
      <!-- Scroll Controls for Desktop -->
      <button 
        class="hidden md:flex absolute left-0 top-1/2 -translate-y-1/2 z-10 bg-black/20 hover:bg-black/40 text-white rounded-r p-2 transition-colors" 
        id="scrollLeft"
        aria-label="Scroll left"
      >
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
        </svg>
      </button>
      
      <button 
        class="hidden md:flex absolute right-0 top-1/2 -translate-y-1/2 z-10 bg-black/20 hover:bg-black/40 text-white rounded-l p-2 transition-colors" 
        id="scrollRight"
        aria-label="Scroll right"
      >
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
        </svg>
      </button>

      <div class="flex overflow-x-auto pb-4 gap-4 md:gap-6 scrollbar-hide">
        {movieCredits.cast.slice(0, 6).map((actor) => (
          <div class="flex-none w-36 md:w-48 lg:w-56 text-center">
            <img 
              src={actor.profile_path ? getImageUrl(actor.profile_path) : '/placeholder-avatar.png'}
              alt={actor.name}
              class="w-full rounded-lg shadow-lg mb-2 md:mb-3"
            />
            <p class="font-semibold text-base md:text-lg whitespace-normal">{actor.name}</p>
            <p class="text-gray-600 text-sm md:text-base whitespace-normal">{actor.character}</p>
          </div>
        ))}
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    const scrollContainer = document.querySelector('.flex.overflow-x-auto');
    const leftButton = document.querySelector('#scrollLeft');
    const rightButton = document.querySelector('#scrollRight');

    if (!scrollContainer || !leftButton || !rightButton) return;

    const scrollAmount = 300; // Adjust this value to control scroll distance

    leftButton.addEventListener('click', () => {
      scrollContainer.scrollBy({
        left: -scrollAmount,
        behavior: 'smooth'
      });
    });

    rightButton.addEventListener('click', () => {
      scrollContainer.scrollBy({
        left: scrollAmount,
        behavior: 'smooth'
      });
    });

    // Show/hide scroll buttons based on scroll position
    const toggleScrollButtons = () => {
      const { scrollLeft, scrollWidth, clientWidth } = scrollContainer;
      
      (leftButton as HTMLElement).style.display = scrollLeft > 0 ? 'flex' : 'none';
      (rightButton as HTMLElement).style.display = scrollLeft < scrollWidth - clientWidth - 10 ? 'flex' : 'none';
    };

    scrollContainer.addEventListener('scroll', toggleScrollButtons);
    window.addEventListener('resize', toggleScrollButtons);
    toggleScrollButtons(); // Initial check
  });
</script>
